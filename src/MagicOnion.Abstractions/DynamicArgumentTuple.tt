<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Runtime.InteropServices;
using MessagePack;
using MessagePack.Formatters;

namespace MagicOnion
{
    // T2 ~ T15
    // NOTE: Blazor WebAssembly (AOT) does not support more than 16 generic type parameters.

<# for(var i = 2; i <= 15; i++) {
    var typeArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("T{0}", x)));
    var methodArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("T{0} item{0}", x)));
    var defaultArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("T{0} default{0}", x)));
    var itemArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("item{0}", x)));
 #>
    
    [MessagePackObject]
    [StructLayout(LayoutKind.Auto)]
#if MAGICONION_USE_REFTYPE_DYNAMICARGUMENTTUPLE
    public sealed class DynamicArgumentTuple<<#= typeArgs #>>
#else
    public struct DynamicArgumentTuple<<#= typeArgs #>>
#endif
    {
<# for(var j = 1; j <= i; j++) { #>
        [Key(<#= j - 1  #>)]
        public readonly T<#= j#> Item<#= j #>;
<# } #>

        [SerializationConstructor]
        public DynamicArgumentTuple(<#= methodArgs #>)
        {
<# for(var j = 1; j <= i; j++) { #>
            Item<#= j#> = item<#= j #>;
<# } #>
        }
    }
<# } #>
}
